peer {

    # Private key of the peer
    privateKey = "45c5b07fc1a6f58892615b7c31dca6c96db58c4bbc538a6b8a22999aaa860c32"
    discovery = {

        # if peer discovery is off
        # the peer window will show
        # only what retrieved by active
        # peer [true/false]
        enabled = false

        # List of the peers to start
        # the search of the online peers
        # values: [ip:port]
        ip.list = [ ]
    }

    # Port for server to listen for incoming connections
    port = 50502

    # Network id
    networkId = 7771
}

transaction.accountSlots = 20

miner {
    
    client {
        enabled = true
        delayBetweenBlocks = 1 second
    }
    server.enabled = true
    server.isFixedClock = false
    client.autoMine = true
    coinbase.secret = "thisisasecret"
    minGasPrice = 1
}

# the folder resources/genesis contains several versions of genesis configuration according to the network the peer will run on
genesis = rsk-dev.json

rpc {  
    providers : {
        web: {
            cors: "*"
            http: {
                enabled: true
                bind_address = "0.0.0.0"
                hosts = ["localhost","127.0.0.1"]
                port: 4444
                }
            ws: {
                enabled: true
                bind_address: "0.0.0.0"
                port: 4445
            }
        }
    }
    
}

blockchain.config {
    name = "regtest"

      hardforkActivationHeights = {
        bahamas = 0,
        afterBridgeSync = -1,
        orchid = 0,
        orchid060 = 0,
        wasabi100 = 0,
        twoToThree = 0,
        papyrus200 = 0
        iris300 = 0
    },
    consensusRules = {
        rskip97 = -1 # disable orchid difficulty drop
    }
}

wallet {
    enabled = true
    accounts = [
        {
            "privateKey" : "7270725db1d109e19a174c4624a70b1a237708c5ccd7a0adc01625be5c460704"
        }
    ]
}

database {
    # Folder to save physical storage files
    # dir = ./rsknode/home
    # Every time the application starts the existing database will be destroyed and all the data will be downloaded from peers again
    # having this set on true does NOT mean that the block chain will start from the last point
    # [true/false]
    reset = true
}

# hello phrase will be included in the hello message of the peer
hello.phrase = RegTest

crypto {
    #Possibility to config crypto library implementation to use
    # Possible values:
    # - "bc" (Bouncy Castle)
    # - "native" (Native C lib)
    library: "bc"
}
